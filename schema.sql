-- Drop tables in order from most dependent (children) to least dependent (parents)
-- Correct order: Rating, Resale_Queue, Website, Event_Staff, Ticket, Band_Member, Artist_Genre, Performance, Event, Staff, Visitor, Band, Artist, Scene, Festival, Location
DROP TABLE IF EXISTS Rating;
DROP TABLE IF EXISTS Resale_Queue;
DROP TABLE IF EXISTS Website;
DROP TABLE IF EXISTS Event_Staff;
DROP TABLE IF EXISTS Ticket;
DROP TABLE IF EXISTS Band_Member;
DROP TABLE IF EXISTS Artist_Genre;
DROP TABLE IF EXISTS Performance;
DROP TABLE IF EXISTS Event;
DROP TABLE IF EXISTS Staff;
DROP TABLE IF EXISTS Visitor;
DROP TABLE IF EXISTS Band;
DROP TABLE IF EXISTS Artist;
DROP TABLE IF EXISTS Scene;
DROP TABLE IF EXISTS Festival;
DROP TABLE IF EXISTS Location;

-- 1. Core Location & Festival Structure
CREATE TABLE Location
(
    location_id INT IDENTITY(1,1) PRIMARY KEY,
    address VARCHAR(255) NOT NULL,
    latitude DECIMAL(9,6) NOT NULL,
    longitude DECIMAL(9,6) NOT NULL,
    city VARCHAR(100) NOT NULL,
    country VARCHAR(100) NOT NULL,
    continent VARCHAR(50) NOT NULL
);

CREATE TABLE Festival
(
    festival_id INT IDENTITY(1,1) PRIMARY KEY,
    year INT NOT NULL CHECK (year >= 1900),
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    location_id INT NOT NULL,
    FOREIGN KEY (location_id) REFERENCES Location(location_id)
);

-- 2. Scenes & Events
CREATE TABLE Scene
(
    scene_id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    max_capacity INT NOT NULL CHECK (max_capacity > 0),
    equipment_info TEXT
);

CREATE TABLE Event
(
    event_id INT IDENTITY(1,1) PRIMARY KEY,
    festival_id INT NOT NULL,
    scene_id INT NOT NULL,
    event_date DATE NOT NULL,
    FOREIGN KEY (festival_id) REFERENCES Festival(festival_id),
    FOREIGN KEY (scene_id) REFERENCES Scene(scene_id)
);

-- 3. Artists, Bands, Genres
CREATE TABLE Artist
(
    artist_id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    stage_name VARCHAR(100),
    date_of_birth DATE NOT NULL,
    website VARCHAR(255),
    instagram_profile VARCHAR(255)
);

CREATE TABLE Band
(
    band_id INT IDENTITY(1,1) PRIMARY KEY,
    band_name VARCHAR(100) NOT NULL,
    formation_date DATE,
    website VARCHAR(255)
);

CREATE TABLE Band_Member
(
    band_id INT NOT NULL,
    artist_id INT NOT NULL,
    PRIMARY KEY (band_id, artist_id),
    FOREIGN KEY (band_id) REFERENCES Band(band_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id)
);

CREATE TABLE Artist_Genre
(
    artist_id INT NOT NULL,
    genre VARCHAR(50) NOT NULL,
    subgenre VARCHAR(50), -- can be NULL or NOT NULL as you wish
    PRIMARY KEY (artist_id, genre),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id)
);

-- 4. Performances
CREATE TABLE Performance
(
    performance_id INT IDENTITY(1,1) PRIMARY KEY,
    event_id INT NOT NULL,
    artist_id INT NULL,
    band_id INT NULL,
    performance_type VARCHAR(50) CHECK (performance_type IN ('warm up','headline','Special guest')),
    start_time TIME NOT NULL,
    duration TIME NOT NULL CHECK (DATEDIFF(MINUTE, '00:00:00', duration) <= 180),
    break_duration TIME CHECK (DATEDIFF(MINUTE, '00:05:00', break_duration) BETWEEN 0 AND 25),
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (artist_id) REFERENCES Artist(artist_id),
    FOREIGN KEY (band_id) REFERENCES Band(band_id),
    -- Ensure only one of artist_id or band_id is set
    CONSTRAINT chk_performance_artist_or_band CHECK (
        (artist_id IS NOT NULL AND band_id IS NULL)
        OR (artist_id IS NULL AND band_id IS NOT NULL)
    )
);

-- 5. Visitors & Tickets
CREATE TABLE Visitor
(
    visitor_id INT IDENTITY(1,1) PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    contact VARCHAR(255),
    age INT CHECK (age > 0)
);

CREATE TABLE Ticket
(
    ticket_id INT IDENTITY(1,1) PRIMARY KEY,
    event_id INT NOT NULL,
    visitor_id INT NOT NULL,
    purchase_date DATE NOT NULL,
    cost DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(50) CHECK (payment_method IN ('credit card','debit card','bank transfer','not cash')),
    ean BIGINT, -- EAN13 barcode is generated by a trigger in triggers.sql
    ticket_category VARCHAR(50),
    used BIT DEFAULT 0,
    -- Each visitor can have only one ticket per event (not per performance)
    CONSTRAINT unique_ticket_per_visitor_event UNIQUE (event_id, visitor_id),
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (visitor_id) REFERENCES Visitor(visitor_id)
    -- Removed performance_id: ticket grants access to all performances of the event
);

-- 6. Staff & Event Staffing
CREATE TABLE Staff
(
    staff_id INT IDENTITY(1,1) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT CHECK(age > 0),
    role VARCHAR(50) NOT NULL,
    experience_level VARCHAR(20) CHECK (experience_level IN ('ειδικευόμενος', 'αρχάριος', 'μέσος', 'έμπειρος', 'πολύ έμπειρος'))
);

CREATE TABLE Event_Staff
(
    event_id INT NOT NULL,
    scene_id INT NOT NULL,
    staff_id INT NOT NULL,
    staff_category VARCHAR(50) CHECK (staff_category IN ('technical', 'security', 'auxiliary')),
    PRIMARY KEY (event_id, scene_id, staff_id, staff_category),
    FOREIGN KEY (event_id) REFERENCES Event(event_id),
    FOREIGN KEY (scene_id) REFERENCES Scene(scene_id),
    FOREIGN KEY (staff_id) REFERENCES Staff(staff_id)
);

-- 7. Ratings & Website
CREATE TABLE Rating
(
    rating_id INT IDENTITY(1,1) PRIMARY KEY,
    ticket_id INT NOT NULL,
    performance_id INT NOT NULL,
    visitor_id INT NOT NULL,
    -- Connect likert rate with visitor
    interpretation_score INT CHECK (interpretation_score BETWEEN 1 AND 5),
    sound_lighting_score INT CHECK (sound_lighting_score BETWEEN 1 AND 5),
    stage_presence_score INT CHECK (stage_presence_score BETWEEN 1 AND 5),
    organization_score INT CHECK (organization_score BETWEEN 1 AND 5),
    overall_score INT CHECK (overall_score BETWEEN 1 AND 5),
    rating_date DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ticket_id) REFERENCES Ticket(ticket_id),
    FOREIGN KEY (performance_id) REFERENCES Performance(performance_id),
    FOREIGN KEY (visitor_id) REFERENCES Visitor(visitor_id)
);

CREATE TABLE Website
(
    website_id INT IDENTITY(1,1) PRIMARY KEY,
    url VARCHAR(255) NOT NULL,
    festival_id INT,
    image_url VARCHAR(255),
    description NVARCHAR(MAX),
    FOREIGN KEY (festival_id) REFERENCES Festival(festival_id)
);

-- 8. Ticket Resale
CREATE TABLE Resale_Queue
(
    resale_id INT IDENTITY(1,1) PRIMARY KEY,
    ticket_id INT NOT NULL,
    seller_id INT NOT NULL,
    buyer_id INT NOT NULL,
    listing_date DATE NOT NULL,
    resale_status VARCHAR(20) CHECK (resale_status IN ('Pending', 'Completed')),
    fifo_order INT,
    FOREIGN KEY (ticket_id) REFERENCES Ticket(ticket_id),
    FOREIGN KEY (seller_id) REFERENCES Visitor(visitor_id),
    FOREIGN KEY (buyer_id) REFERENCES Visitor(visitor_id)
);

-- Indexes for performance and query optimization -- Q2.2

-- Speeds up filtering and joining by festival year (used in revenue and grouping queries)
CREATE INDEX idx_festival_year ON Festival(year);

-- Speeds up filtering and sorting by ticket purchase date (useful for sales analysis)
CREATE INDEX idx_ticket_purchase_date ON Ticket(purchase_date);

-- Speeds up joins and lookups for tickets by event
CREATE INDEX idx_ticket_event_id ON Ticket(event_id);

-- Speeds up joins and lookups for tickets by visitor
CREATE INDEX idx_ticket_visitor_id ON Ticket(visitor_id);

-- Speeds up queries for performances by artist
CREATE INDEX idx_performance_artist_id ON Performance(artist_id);

-- Speeds up queries for performances by event
CREATE INDEX idx_performance_event_id ON Performance(event_id);

-- Speeds up queries for staff assignments by event and scene
CREATE INDEX idx_event_staff_event_scene ON Event_Staff(event_id, scene_id);

-- Speeds up queries for artist genres (e.g., finding all artists of a genre)
CREATE INDEX idx_artist_genre_genre ON Artist_Genre(genre);

-- GIA FORCE INDEX USE.
CREATE INDEX idx_rating_performance_id ON Rating(performance_id);

-- (Προαιρετικά για βελτιστοποίηση b6)
CREATE INDEX idx_rating_performance_visitor ON Rating(performance_id, visitor_id);

-- After deleting all rows from a table, reset its identity seed like this:
DBCC CHECKIDENT ('Location', RESEED, 0);
DBCC CHECKIDENT ('Festival', RESEED, 0);
DBCC CHECKIDENT ('Scene', RESEED, 0);
DBCC CHECKIDENT ('Event', RESEED, 0);
DBCC CHECKIDENT ('Artist', RESEED, 0);
DBCC CHECKIDENT ('Band', RESEED, 0);
DBCC CHECKIDENT ('Performance', RESEED, 0);
DBCC CHECKIDENT ('Visitor', RESEED, 0);
DBCC CHECKIDENT ('Ticket', RESEED, 0);
DBCC CHECKIDENT ('Staff', RESEED, 0);
DBCC CHECKIDENT ('Rating', RESEED, 0);
DBCC CHECKIDENT ('Website', RESEED, 0);
DBCC CHECKIDENT ('Resale_Queue', RESEED, 0);
